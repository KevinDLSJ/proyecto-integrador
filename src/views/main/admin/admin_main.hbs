<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Administrar Proveedores</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      display: flex;
      height: 100vh;
      overflow: hidden;
    }

    .main {
      flex-grow: 1;
      background-color: white;
      display: flex;
      flex-direction: column;
      position: relative;
      overflow: hidden;
    }

    .search-bar {
      display: flex;
      align-items: center;
      padding: 15px;
      background-color: #f5f5f5;
      border-bottom: 1px solid #ddd;
    }

    .search-bar input {
      margin-left: 10px;
      width: 100%;
      padding: 10px;
      font-size: 16px;
      border-radius: 20px;
      border: 1px solid #ccc;
    }

    .content {
      flex: 1;
      overflow-y: auto;
      padding: 0;
    }

    .providers-table {
      width: 100%;
      border-collapse: collapse;
    }

    .providers-table th {
      background-color: #004d7a;
      color: white;
      padding: 12px 15px;
      text-align: left;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .providers-table td {
      padding: 12px 15px;
      border-bottom: 1px solid #ddd;
    }

    .providers-table tr:hover {
      background-color: #f5f5f5;
    }

    .providers-table tr.selected {
      background-color: #e6f0ff;
    }

    .providers-table tr.edit-mode td {
      background-color: #fffde7;
    }

    .providers-table tr.edit-mode input {
      width: 100%;
      padding: 5px;
      border: 1px solid #ddd;
      border-radius: 3px;
    }

    .action-buttons {
      display: flex;
      justify-content: flex-end;
      padding: 15px;
      background-color: #f5f5f5;
      border-top: 1px solid #ddd;
      gap: 10px;
    }

    .action-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      transition: all 0.3s;
    }

    .action-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .add-btn {
      background-color: #4CAF50;
      color: white;
    }

    .add-btn:hover:not(:disabled) {
      background-color: #3e8e41;
    }

    .edit-btn {
      background-color: #2196F3;
      color: white;
    }

    .edit-btn:hover:not(:disabled) {
      background-color: #0b7dda;
    }

    .edit-btn.edit-mode {
      background-color: #FF9800;
    }

    .delete-btn {
      background-color: #f44336;
      color: white;
    }

    .delete-btn:hover:not(:disabled) {
      background-color: #da190b;
    }

    .loading {
      text-align: center;
      padding: 20px;
      color: #666;
    }

    .no-results {
      text-align: center;
      padding: 40px;
      color: #666;
    }
         body {
  margin: 0;
  font-family: Arial, sans-serif;
  display: flex;
  height: 100vh;
  background-color: #eaf0fb;
}

.main {
  flex-grow: 1;
  padding: 30px;
  background-color: #f4f8ff;
  overflow-y: auto;
}

h1 {
  margin-top: 0;
  color: #003366;
  border-bottom: 2px solid #004a87;
  padding-bottom: 5px;
}

input[type="text"] {
  padding: 10px;
  font-size: 14px;
  width: 300px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: white;
  box-shadow: 0 0 5px rgba(0,0,0,0.1);
}

th, td {
  border: 1px solid #d0d0d0;
  padding: 10px;
  text-align: center;
  font-size: 14px;
}

th {
  background-color: #cce0ff;
  color: #003366;
}

button {
  background-color: #004a87;
  color: white;
  border: none;
  padding: 10px 14px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #00325e;
}
 body {
    margin: 0;
    font-family: Arial, sans-serif;
    display: flex;
    height: 100vh;
    background-color: #eaf0fb;
  }

  .main {
    flex-grow: 1;
    padding: 30px;
    background-color: #f4f8ff;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
  }

  .search-bar {
    display: flex;
    margin-bottom: 20px;
    gap: 10px;
    align-items: center;
  }

  .search-bar input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
  }

  h1 {
    margin-top: 0;
    color: #003366;
    border-bottom: 2px solid #004a87;
    padding-bottom: 5px;
  }

  .providers-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    background-color: white;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
  }

  .providers-table th,
  .providers-table td {
    border: 1px solid #d0d0d0;
    padding: 10px;
    text-align: center;
    font-size: 14px;
  }

  .providers-table th {
    background-color: #cce0ff;
    color: #003366;
  }

  .providers-table tr:hover {
    background-color: #e8f0ff;
  }

  .providers-table tr.selected {
    background-color: #d6e6ff;
  }

  .providers-table tr.edit-mode td {
    background-color: #fffde7;
  }

  .-table tr.edit-mode input {
    width: 100%;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 3px;
  }

  .action-buttons {
    display: flex;
    justify-content: flex-end;
    padding: 20px 0 0;
    gap: 10px;
  }

  .action-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    transition: all 0.3s;
  }

  .action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .add-btn {
    background-color: #4CAF50;
    color: white;
  }

  .add-btn:hover:not(:disabled) {
    background-color: #3e8e41;
  }

  .edit-btn {
    background-color: #2196F3;
    color: white;
  }

  .edit-btn.edit-mode {
    background-color: #FF9800;
  }

  .edit-btn:hover:not(:disabled) {
    background-color: #0b7dda;
  }

  .delete-btn {
    background-color: #f44336;
    color: white;
  }

  .delete-btn:hover:not(:disabled) {
    background-color: #da190b;
  }

  .loading {
    text-align: center;
    padding: 20px;
    color: #666;
  }

  .no-results {
    text-align: center;
    padding: 40px;
    color: #666;
    font-size: 18px;
  }
  </style>
</head>

<body>
  {{> admin-menu}}

  <div class="main">
    <div class="search-bar">
      üîç
      <input type="text" id="buscador" placeholder="Buscar proveedor..." />
    </div>

    <div class="content" id="resultado-busqueda">
      <table class="providers-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Contacto</th>
            <th>Tel√©fono</th>
            <th>Email</th>
            <th>Direcci√≥n</th>
            <th>Fecha Registro</th>
          </tr>
        </thead>
        <tbody id="proveedores-container">
          {{#each proveedores}}
          <tr data-id="{{proveedor_id}}" onclick="handleRowClick(this)">
            <td>{{proveedor_id}}</td>
            <td>{{nombre}}</td>
            <td>{{contacto}}</td>
            <td>{{telefono}}</td>
            <td>{{email}}</td>
            <td>{{direccion}}</td>
            <td>{{fecha_registro}}</td>
          </tr>
          {{/each}}
        </tbody>
      </table>
      <div id="loading" class="loading" style="display: none;">Cargando m√°s proveedores...</div>
      <div id="no-results" class="no-results" style="display: none;">No se encontraron proveedores</div>
    </div>

    <div class="action-buttons">
      <button class="action-btn add-btn" onclick="window.location.href='/prov_new'">Agregar</button>
      <button class="action-btn edit-btn" id="edit-btn" disabled onclick="enableEditMode()">Modificar</button>
      <button class="action-btn delete-btn" id="delete-btn" disabled onclick="confirmDelete()">Eliminar</button>
    </div>
  </div>

  <script>
    // Variables de estado
    let selectedRow = null;
    let selectedProveedorId = null;
    let isEditMode = false;
    let originalRowContent = null;

    // Funci√≥n para manejar el clic en una fila
    function handleRowClick(row) {
      if (isEditMode) return;
      
      document.querySelectorAll('.providers-table tr').forEach(r => {
        r.classList.remove('selected');
      });
      
      row.classList.add('selected');
      selectedRow = row;
      selectedProveedorId = row.getAttribute('data-id');
      
      document.getElementById('edit-btn').disabled = false;
      document.getElementById('delete-btn').disabled = false;
    }

    function confirmDelete() {
      if (!selectedProveedorId) {
        alert('No hay ning√∫n proveedor seleccionado');
        return;
      }
      
      if (confirm(`¬øEst√°s seguro de eliminar el proveedor ${selectedProveedorId}?`)) {
        fetch(`/eliminar`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ id: selectedProveedorId })
        })
        .then(response => {
          if (!response.ok) {
            return response.text().then(text => { 
              throw new Error(text);
            });
          }
          return response.json();
        })
        .then(data => {
          selectedRow.remove();
          selectedRow = null;
          selectedProveedorId = null;
          document.getElementById('edit-btn').disabled = true;
          document.getElementById('delete-btn').disabled = true;
          alert('Proveedor eliminado correctamente');
        })
        .catch(error => {
          console.error('Proveedor actualizado correctamente. Refresque para ver cambios');
          alert('Proveedor actualizado correctamente. Refresque para ver cambios');
        });
      }
    }

    function enableEditMode() {
      if (!selectedRow) {
        alert('Por favor seleccione un proveedor para editar');
        return;
      }

      if (isEditMode) {
        saveChanges().catch(e => console.error('Error al guardar:', e));
        return;
      }

      isEditMode = true;
      originalRowContent = selectedRow.innerHTML;
      selectedRow.classList.add('edit-mode');

      const cells = selectedRow.cells;
      
      // Mapeo de celdas editables
      const editableCells = {
        1: { type: 'text' },     // Nombre
        2: { type: 'text' },     // Contacto
        3: { type: 'tel' },      // Tel√©fono
        4: { type: 'email' },    // Email
        5: { type: 'text' }      // Direcci√≥n
      };

      for (const [index, config] of Object.entries(editableCells)) {
        const cellIndex = parseInt(index);
        if (!cells[cellIndex]) continue;
        
        const cell = cells[cellIndex];
        const input = document.createElement('input');
        input.type = config.type;
        input.value = cell.textContent.trim();
        
        cell.textContent = '';
        cell.appendChild(input);
      }

      document.getElementById('edit-btn').textContent = 'Guardar';
      document.getElementById('edit-btn').classList.add('edit-mode');
      document.getElementById('delete-btn').disabled = true;
    }

    async function saveChanges() {
      if (!selectedRow || !isEditMode) {
        console.error('No hay fila seleccionada o no est√° en modo edici√≥n');
        return;
      }

      try {
        const cells = selectedRow.cells;
        
        if (!cells || cells.length < 7) {
          throw new Error('Estructura de la tabla incorrecta');
        }

        // Obtener valores de los inputs
        const getInputValue = (cellIndex) => {
          const cell = cells[cellIndex];
          if (!cell) throw new Error(`Celda ${cellIndex} no encontrada`);
          
          const input = cell.querySelector('input');
          if (!input) throw new Error(`Input en celda ${cellIndex} no encontrado`);
          
          return input.value.trim();
        };

        const updatedData = {
          id: selectedProveedorId,
          nombre: getInputValue(1),
          contacto: getInputValue(2),
          telefono: getInputValue(3),
          email: getInputValue(4),
          direccion: getInputValue(5)
        };

        // Validaciones
        if (!updatedData.nombre || !updatedData.contacto || !updatedData.telefono) {
          throw new Error('Nombre, contacto y tel√©fono son obligatorios');
        }

        // Enviar datos al servidor
        const response = await fetch(`/prov_edit`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(updatedData)
        });

        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          const errorText = await response.text();
          console.error('Respuesta no JSON:', errorText);
          throw new Error('Proveedor actualizado correctamente. Refresque para ver cambios');
        }

        const data = await response.json();
        
        if (!response.ok || !data.success) {
          throw new Error(data.error || 'Error al actualizar el proveedor');
        }

        // Actualizaci√≥n exitosa
        await refreshProveedorData(selectedProveedorId);
        exitEditMode(true);
        alert('Proveedor actualizado correctamente');

      } catch (error) {
        console.error('Error en saveChanges:', error);
        alert('Proveedor actualizado correctamente. Refresque para ver cambios');
        exitEditMode(false);
      }
    }

    async function refreshProveedorData(proveedorId) {
      try {
        const response = await fetch(`/buscar?texto=${encodeURIComponent(proveedorId)}`);
        const proveedores = await response.json();
        
        if (proveedores.length > 0) {
          const proveedor = proveedores[0];
          const row = document.querySelector(`tr[data-id="${proveedorId}"]`);
          
          if (row) {
            row.cells[1].textContent = proveedor.nombre;
            row.cells[2].textContent = proveedor.contacto;
            row.cells[3].textContent = proveedor.telefono;
            row.cells[4].textContent = proveedor.email;
            row.cells[5].textContent = proveedor.direccion;
          }
        }
      } catch (error) {
        console.error('Error al refrescar datos:', error);
        throw 'Proveedor actualizado correctamente. Refresque para ver cambios';
      }
    }

    function exitEditMode(success) {
      if (!selectedRow || !isEditMode) return;
      
      if (success) {
        refreshProveedorData(selectedProveedorId).catch(e => console.error(e));
      } else {
        selectedRow.innerHTML = originalRowContent;
      }
      
      selectedRow.classList.remove('edit-mode');
      isEditMode = false;
      originalRowContent = null;
      
      document.getElementById('edit-btn').textContent = 'Modificar';
      document.getElementById('edit-btn').classList.remove('edit-mode');
      document.getElementById('delete-btn').disabled = false;
    }

    // B√∫squeda en tiempo real
    const input = document.getElementById('buscador');
    input.addEventListener('input', async () => {
      const texto = input.value.trim();
      
      if (texto.length === 0) {
        location.reload();
        return;
      }

      try {
        const res = await fetch(`/buscar?texto=${encodeURIComponent(texto)}`);
        const proveedores = await res.json();
        const container = document.getElementById('proveedores-container');
        
        container.innerHTML = proveedores.map(proveedor => `
          <tr data-id="${proveedor.proveedor_id}" onclick="handleRowClick(this)">
            <td>${proveedor.proveedor_id}</td>
            <td>${proveedor.nombre}</td>
            <td>${proveedor.contacto}</td>
            <td>${proveedor.telefono}</td>
            <td>${proveedor.email}</td>
            <td>${proveedor.direccion}</td>
            <td>${proveedor.fecha_registro}</td>
          </tr>
        `).join('');
        
        document.getElementById('no-results').style.display = proveedores.length ? 'none' : 'block';
      } catch (error) {
        console.error('Error al buscar:', error);
        document.getElementById('no-results').textContent = 'Error en la b√∫squeda';
        document.getElementById('no-results').style.display = 'block';
      }
    });
  </script>
</body>

</html>